<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                           http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/aop
                           http://www.springframework.org/schema/aop/spring-aop.xsd
                           http://www.springframework.org/schema/context
                           http://www.springframework.org/schema/context/spring-context.xsd
                           http://www.springframework.org/schema/tx
                           http://www.springframework.org/schema/tx/spring-tx.xsd">


    <!-- 导入外部的参数 -->
    <context:property-placeholder location="classpath:database.properties"/>
    <!-- dbcp 连接池 -->
    <bean id="dbcp_pool" class="org.apache.commons.dbcp.BasicDataSource">
        <!-- 基本参数 -->
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"></property>
        <property name="password" value="${jdbc.password}"></property>
        <property name="driverClassName" value="${jdbc.driverClassName}"></property>
        <!-- 详细参数 -->
        <!-- 连接池的最大连接对象 数量 -->
        <property name="maxActive" value="3"></property>
        <!-- 最少要空闲 1 个连接对象 -->
        <property name="minIdle" value="1"></property>
        <!-- 初始化连接池  要创建1个连接对象 -->
        <property name="initialSize" value="1"></property>
        <!-- 当向连接池索要连接时，如果没有空闲连接，最大等待的时长：毫秒 -->
        <property name="maxWait" value="3000"></property>
    </bean>

    <!-- SqlSessionFactory: FactoryBean完成
         依赖mybatis的所有配置信息：1>连接池  2> 别名   3> Mapper文件注册
    -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 连接池 -->
        <property name="dataSource" ref="dbcp_pool"/>
        <!-- 别名 -->
        <property name="typeAliasesPackage" value="com.fk.shopping.dao"/>
        <!-- mapper文件  UserDAO.xml   OrderDAO.xml StudentDAO.xml
             【如果daomapper文件 和 DAO接口 同包且同名，则，此依赖可以省略】
        -->
        <property name="mapperLocations" value="classpath:com/fk/shopping/dao/*.xml"/>


        <!--   分页安装注册     -->
        <property name="plugins">
            <array>
                <bean class="com.github.pagehelper.PageInterceptor">
                    <property name="properties">
                        <props>
                            <prop key="reasonable">true</prop>
                        </props>
                    </property>
                </bean>
            </array>
        </property>

    </bean>

    <!-- DAO
         sqlSession.getMapper(StudentDAO.class);
         2. DAO接口 1. sqlSession
        定制DAO实现，将实现类的对象放入工厂中；并且DAO的组件ID=“首字母小写接口类名”    StudentDAO==> studentDAO
    -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- SqlSessionFactory
             【如果在spring工厂中只有一个 SqlSessionFactory 则如下依赖可以省略】
        -->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <!-- DAO接口类 -->
        <property name="basePackage" value="com.fk.shopping.dao"/>
    </bean>

    <!-- Service 省略 -->
    <!-- 事务管理 -->
    <!-- 事务管理器 -->
    <bean id="tx_manager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dbcp_pool"/>
    </bean>
    <!-- 事务的额外功能：基于”事务管理器“ 完成定制 省略-->

    <!-- 注解的驱动配置 -->
    <!-- 告知spring，哪个包的类中有注解 -->
    <context:component-scan base-package="com.fk.shopping" use-default-filters="true">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>
    <!-- 告知spring事务管理器是哪个组件 -->
    <tx:annotation-driven transaction-manager="tx_manager"/>

</beans>